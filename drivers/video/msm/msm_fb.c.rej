--- drivers/video/msm/msm_fb.c	2013-06-24 02:50:46.000000000 -0600
+++ drivers/video/msm/msm_fb.c	2013-08-01 23:38:01.000000000 -0600
@@ -683,49 +662,13 @@
 static void sre_update(unsigned long data)
 {
    struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)data;
-   queue_work(mfd->sre_wq, &mfd->sre_work);
-}
-
-static int msm_fb_update_perflock_locked(int newlock)
-{
-	if (perflock_pan.lock_stat == newlock)
-		return 0; 
-
-	
-	if (perflock_pan.activelock)
-		perf_unlock(perflock_pan.activelock);
-
-	perflock_pan.activelock = NULL;
-	if (newlock == MSM_FB_PERFORMANCE_NORMAL) {
-		perflock_pan.activelock = &perflock_pan.lock_0;
-	} else if (newlock == MSM_FB_PERFORMANCE_MORE) {
-		perflock_pan.activelock = &perflock_pan.lock_more;
-	}
-
-	
-	if (perflock_pan.activelock) {
-		perf_lock(perflock_pan.activelock);
 
-		if (perflock_pan.lock_stat == MSM_FB_PERFORMANCE_NONE) {
-			schedule_delayed_work(&perflock_pan.worker,
-					msecs_to_jiffies(perf_qos_duration));
-		}
-	}
-
-	perflock_pan.lock_stat = newlock;
-	return 1;
-}
+   if (!mfd->panel_power_on) {
+	PR_DISP_INFO("%s: skip sre_work\n", __func__);
+	return;
+   }
 
-static void msm_fb_perflock_reaper(struct work_struct *work)
-{
-	down(&msm_fb_pan_sem);
-	if (--perflock_pan.expire_tick) {
-		schedule_delayed_work(&perflock_pan.worker,
-					msecs_to_jiffies(perf_qos_duration));
-	} else {
-		msm_fb_update_perflock_locked(MSM_FB_PERFORMANCE_NONE);
-	}
-	up(&msm_fb_pan_sem);
+   queue_work(mfd->sre_wq, &mfd->sre_work);
 }
 
 static int msm_fb_probe(struct platform_device *pdev)
@@ -2386,52 +2342,75 @@
 	mutex_lock(&mfd->sync_mutex);
 	if (mfd->is_committing) {
 		mutex_unlock(&mfd->sync_mutex);
-		ret = wait_for_completion_timeout(&mfd->commit_comp,
-			msecs_to_jiffies(WAIT_FENCE_TIMEOUT));
-		if (ret <= 0)
+		ret = wait_for_completion_interruptible_timeout(
+				&mfd->commit_comp,
+			msecs_to_jiffies(WAIT_DISP_OP_TIMEOUT));
+		if (ret < 0)
+			ret = -ERESTARTSYS;
+		else if (!ret)
 			pr_err("%s wait for commit_comp timeout %d %d",
 				__func__, ret, mfd->is_committing);
+		if (ret <= 0) {
+			mutex_lock(&mfd->sync_mutex);
+			mfd->is_committing = 0;
+			complete_all(&mfd->commit_comp);
+			mutex_unlock(&mfd->sync_mutex);
+		}
 	} else {
 		mutex_unlock(&mfd->sync_mutex);
 	}
 	return ret;
 }
-static int msm_fb_pan_display_ex(struct fb_var_screeninfo *var,
-			      struct fb_info *info, u32 wait_for_finish)
+static int msm_fb_pan_display_ex(struct fb_info *info,
+		struct mdp_display_commit *disp_commit)
 {
 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
 	struct msm_fb_backup_type *fb_backup;
+	struct fb_var_screeninfo *var = &disp_commit->var;
+	u32 wait_for_finish = disp_commit->wait_for_finish;
 	int ret = 0;
-	if (bf_supported && info->node == 2) {
-		pr_err("%s: no pan display for fb%d!",
-		       __func__, info->node);
-		return -EPERM;
-	}
 
-	if (info->node != 0 || mfd->cont_splash_done)	
-		if ((!mfd->op_enable) || (!mfd->panel_power_on))
+	if (disp_commit->flags &
+		MDP_DISPLAY_COMMIT_OVERLAY) {
+		if (!mfd->panel_power_on) 
+			return -EPERM;
+	} else {
+		if (bf_supported && info->node == 2) {
+			pr_err("%s: no pan display for fb%d!",
+				   __func__, info->node);
 			return -EPERM;
+		}
 
-	if (var->xoffset > (info->var.xres_virtual - info->var.xres))
-		return -EINVAL;
+		if (info->node != 0 || mfd->cont_splash_done)	
+			if ((!mfd->op_enable) || (!mfd->panel_power_on))
+				return -EPERM;
 
-	if (var->yoffset > (info->var.yres_virtual - info->var.yres))
-		return -EINVAL;
+		if (var->xoffset > (info->var.xres_virtual - info->var.xres))
+			return -EINVAL;
+
+		if (var->yoffset > (info->var.yres_virtual - info->var.yres))
+			return -EINVAL;
+	}
 	msm_fb_pan_idle(mfd);
 
 	mutex_lock(&mfd->sync_mutex);
 
-	if (info->fix.xpanstep)
-		info->var.xoffset =
-		    (var->xoffset / info->fix.xpanstep) * info->fix.xpanstep;
-
-	if (info->fix.ypanstep)
-		info->var.yoffset =
-		    (var->yoffset / info->fix.ypanstep) * info->fix.ypanstep;
-
+	if (!(disp_commit->flags &
+		MDP_DISPLAY_COMMIT_OVERLAY)) {
+		if (info->fix.xpanstep)
+			info->var.xoffset =
+				(var->xoffset / info->fix.xpanstep) *
+					info->fix.xpanstep;
+
+		if (info->fix.ypanstep)
+			info->var.yoffset =
+				(var->yoffset / info->fix.ypanstep) *
+					info->fix.ypanstep;
+	}
 	fb_backup = (struct msm_fb_backup_type *)mfd->msm_fb_backup;
 	memcpy(&fb_backup->info, info, sizeof(struct fb_info));
-	memcpy(&fb_backup->var, var, sizeof(struct fb_var_screeninfo));
+	memcpy(&fb_backup->disp_commit, disp_commit,
+		sizeof(struct mdp_display_commit));
 	mfd->is_committing = 1;
 	INIT_COMPLETION(mfd->commit_comp);
 	schedule_work(&mfd->commit_work);
@@ -4254,34 +4283,9 @@
 		ret = -EINVAL;
 		break;
 	}
-
 	return ret;
 }
 
-static int do_sched_setscheduler(pid_t pid, int val)
-{
-	struct sched_param lparam;
-	struct task_struct *p;
-	int retval;
-
-	if (pid < 0)
-		return -EINVAL;
-
-	lparam.sched_priority = val;
-
-	rcu_read_lock();
-	retval = -ESRCH;
-	p = find_task_by_vpid(pid);
-
-	if (p != NULL)
-		retval = sched_setscheduler_nocheck(p, SCHED_RR, &lparam);
-
-	rcu_read_unlock();
-
-	return retval;
-}
-
-
 static int msm_fb_ioctl(struct fb_info *info, unsigned int cmd,
 			unsigned long arg)
 {
@@ -4301,21 +4305,13 @@
 	struct msmfb_mdp_pp mdp_pp;
 	struct mdp_buf_sync buf_sync;
 	struct msmfb_metadata mdp_metadata;
-	struct msmfb_sched_priority sched_priority_data;
 	int ret = 0;
-
-
 	struct msmfb_usb_projector_info tmp_info;
 
 	msm_fb_pan_idle(mfd);
+
 	switch (cmd) {
 #ifdef CONFIG_FB_MSM_OVERLAY
-	case FBIO_WAITFORVSYNC:
-		ret = msmfb_overlay_wait4vsync(info, argp);
-		break;
-	case MSMFB_OVERLAY_VSYNC_CTRL:
-		ret = msmfb_overlay_vsync_ctrl(info, argp);
-		break;
 	case MSMFB_OVERLAY_GET:
 		ret = msmfb_overlay_get(info, argp);
 		break;
@@ -4715,13 +4731,6 @@
 			return ret;
 		break;
 
-	case MSMFB_SET_SCHED_PRIORITY:
-		ret = copy_from_user(&sched_priority_data, argp, sizeof(sched_priority_data));
-		if(ret)
-			return ret;
-		do_sched_setscheduler(sched_priority_data.pid, sched_priority_data.priority);
-		break;
-
 	default:
 		MSM_FB_INFO("MDP: unknown ioctl (cmd=%x, type=0x%x, nr=0x%x) received!\n",
 			cmd, _IOC_TYPE(cmd), _IOC_NR(cmd));
