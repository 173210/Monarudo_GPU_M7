--- drivers/staging/android/lowmemorykiller.c	2013-06-24 02:50:47.000000000 -0600
+++ drivers/staging/android/lowmemorykiller.c	2013-08-01 23:38:03.000000000 -0600
@@ -37,6 +37,16 @@
 #include <linux/sched.h>
 #include <linux/rcupdate.h>
 #include <linux/notifier.h>
+#include <linux/mutex.h>
+#include <linux/delay.h>
+#include <linux/swap.h>
+
+#ifdef CONFIG_HIGHMEM
+	#define _ZONE ZONE_HIGHMEM
+#else
+	#define _ZONE ZONE_NORMAL
+#endif
+
 
 extern void show_meminfo(void);
 static uint32_t lowmem_debug_level = 2;
@@ -143,11 +157,35 @@
 	int selected_oom_score_adj;
 	int selected_oom_adj = 0;
 	int array_size = ARRAY_SIZE(lowmem_adj);
-	int other_free = global_page_state(NR_FREE_PAGES);
-	int other_file = global_page_state(NR_FILE_PAGES) -
-		global_page_state(NR_SHMEM) - global_page_state(NR_MLOCK);
+	int other_free;
+	int other_file;
+	int reserved_free = 0;
+	unsigned long nr_to_scan = sc->nr_to_scan;
 	int fork_boost = 0;
 	size_t *min_array;
+	struct zone *zone;
+
+	if (nr_to_scan > 0) {
+		if (!mutex_trylock(&scan_mutex)) {
+			if (!(lowmem_only_kswapd_sleep && !current_is_kswapd())) {
+				msleep_interruptible(lowmem_sleep_ms);
+			}
+			return 0;
+		}
+	}
+
+	for_each_zone(zone)
+	{
+		if(is_normal(zone))
+		{
+			reserved_free = zone->watermark[WMARK_MIN] + zone->lowmem_reserve[_ZONE];
+			break;
+		}
+	}
+
+	other_free = global_page_state(NR_FREE_PAGES);
+	other_file = global_page_state(NR_FILE_PAGES) -
+		global_page_state(NR_SHMEM) - global_page_state(NR_MLOCK) ;
 
 	if (lowmem_fork_boost &&
 		time_before_eq(jiffies, lowmem_fork_boost_timeout)) {
@@ -172,17 +210,21 @@
 		}
 	}
 
-	if (sc->nr_to_scan > 0)
-		lowmem_print(3, "lowmem_shrink %lu, %x, ofree %d %d, ma %d\n",
-				sc->nr_to_scan, sc->gfp_mask, other_free,
-				other_file, min_score_adj);
+	if (nr_to_scan > 0)
+		lowmem_print(3, "lowmem_shrink %lu, %x, ofree %d %d, ma %d, rfree %d\n",
+				nr_to_scan, sc->gfp_mask, other_free,
+				other_file, min_score_adj, reserved_free);
 	rem = global_page_state(NR_ACTIVE_ANON) +
 		global_page_state(NR_ACTIVE_FILE) +
 		global_page_state(NR_INACTIVE_ANON) +
 		global_page_state(NR_INACTIVE_FILE);
-	if (sc->nr_to_scan <= 0 || min_score_adj == OOM_SCORE_ADJ_MAX + 1) {
+	if (nr_to_scan <= 0 || min_score_adj == OOM_SCORE_ADJ_MAX + 1) {
 		lowmem_print(5, "lowmem_shrink %lu, %x, return %d\n",
-			     sc->nr_to_scan, sc->gfp_mask, rem);
+			     nr_to_scan, sc->gfp_mask, rem);
+
+		if (nr_to_scan > 0)
+			mutex_unlock(&scan_mutex);
+
 		return rem;
 	}
 	selected_oom_score_adj = min_score_adj;
@@ -198,6 +240,11 @@
 		if (time_before_eq(jiffies, lowmem_deathpending_timeout)) {
 			if (test_task_flag(tsk, TIF_MEMDIE)) {
 				rcu_read_unlock();
+				
+				if (!(lowmem_only_kswapd_sleep && !current_is_kswapd())) {
+					msleep_interruptible(lowmem_sleep_ms);
+				}
+				mutex_unlock(&scan_mutex);
 				return 0;
 			}
 		}
@@ -246,10 +294,18 @@
 		send_sig(SIGKILL, selected, 0);
 		set_tsk_thread_flag(selected, TIF_MEMDIE);
 		rem -= selected_tasksize;
+		rcu_read_unlock();
+		
+		if (!(lowmem_only_kswapd_sleep && !current_is_kswapd())) {
+			msleep_interruptible(lowmem_sleep_ms);
+		}
 	}
+	else
+		rcu_read_unlock();
+
 	lowmem_print(4, "lowmem_shrink %lu, %x, return %d\n",
 		     sc->nr_to_scan, sc->gfp_mask, rem);
-	rcu_read_unlock();
+	mutex_unlock(&scan_mutex);
 	return rem;
 }
 
