From 6d81a218ec1d194010395112c0832522a9fa5944 Mon Sep 17 00:00:00 2001
From: faux123 <faux123@gmail.com>
Date: Tue, 22 Jan 2013 22:50:49 -0500
Subject: [PATCH] Support for display gamma control

Originally written by Paul Reioux (faux123)

Modified from his original implementation as follows:
* Remove kgamma_ctrl sysfs entry - it did absolutely nothing
* Alter the show() functions to output the checksum in the
first entry, in order to match the expected input of
the store() functions.  This should not break existing
applications
* Move store/show code to a common function
* Add limit checks from Mike Cain (motley)
* Added a kgamma_apply sysfs entry which will apply
  the current state when anything is stored to it,
  instead of waiting until the next time the LCD
  is power cycled

Change-Id: I8835e42709cefa547e02e28a7e5a381d88282700
---
 drivers/video/msm/mipi_lgit.c | 187 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 184 insertions(+), 3 deletions(-)

diff --git a/drivers/video/msm/mipi_lgit.c b/drivers/video/msm/mipi_lgit.c
index 24684ee..9de59cd 100644
--- a/drivers/video/msm/mipi_lgit.c
+++ b/drivers/video/msm/mipi_lgit.c
@@ -1,6 +1,7 @@
 /*
- *  Copyright (C) 2011-2012, LG Eletronics,Inc. All rights reserved.
- *      LGIT LCD device driver
+ * Copyright (C) 2013 The CyanogenMod Project
+ * Copyright (C) 2011-2012, LG Eletronics,Inc. All rights reserved.
+ *     LGIT LCD device driver
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -17,6 +18,7 @@
  * 02110-1301, USA.
  *
  */
+#include <linux/string.h>
 #include <linux/gpio.h>
 #include <linux/syscore_ops.h>
 
@@ -27,9 +29,16 @@
 
 static struct msm_panel_common_pdata *mipi_lgit_pdata;
 
+#ifdef CONFIG_LGIT_VIDEO_WXGA_CABC
+struct dsi_cmd_desc local_power_on_set_1[33];
+#else
+struct dsi_cmd_desc local_power_on_set_1[28];
+#endif
+
 static struct dsi_buf lgit_tx_buf;
 static struct dsi_buf lgit_rx_buf;
 static int skip_init;
+static int lcd_isactive = 0;
 
 #define DSV_ONBST 57
 
@@ -75,9 +84,10 @@ static int mipi_lgit_lcd_on(struct platform_device *pdev)
 	if (mfd->key != MFD_KEY)
 		return -EINVAL;
 
+	lcd_isactive = 1;
 	MIPI_OUTP(MIPI_DSI_BASE + 0x38, 0x10000000);
 	ret = mipi_dsi_cmds_tx(&lgit_tx_buf,
-			mipi_lgit_pdata->power_on_set_1,
+			local_power_on_set_1,
 			mipi_lgit_pdata->power_on_set_size_1);
 	MIPI_OUTP(MIPI_DSI_BASE + 0x38, 0x14000000);
 	if (ret < 0) {
@@ -136,6 +146,8 @@ static int mipi_lgit_lcd_off(struct platform_device *pdev)
 	if (mfd->key != MFD_KEY)
 		return -EINVAL;
 
+	lcd_isactive = 0;
+
 	MIPI_OUTP(MIPI_DSI_BASE + 0x38, 0x10000000);
 	ret = mipi_dsi_cmds_tx(&lgit_tx_buf,
 			mipi_lgit_pdata->power_off_set_1,
@@ -214,13 +226,166 @@ struct syscore_ops panel_syscore_ops = {
 	.shutdown = mipi_lgit_lcd_shutdown,
 };
 
+/******************* Begin sysfs interface *******************/
+
+static unsigned char calc_checksum(int intArr[]) {
+	int i = 0;
+	unsigned char chksum = 0;
+
+	for (i=1; i<10; i++)
+		chksum += intArr[i];
+
+	return chksum;
+}
+
+static ssize_t do_kgamma_store(struct device *dev, struct device_attribute *attr,
+				const char *buf, size_t count,
+				unsigned int offset)
+{
+	int kgamma[10];
+	int i;
+
+	sscanf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		&kgamma[0], &kgamma[1], &kgamma[2], &kgamma[3],
+		&kgamma[4], &kgamma[5], &kgamma[6], &kgamma[7],
+		&kgamma[8], &kgamma[9]);
+
+	if (kgamma[5] > 31 || (kgamma[6] > 31)) {
+		pr_info("gamma 0 and gamma 1 values can't be over 31, got %d %d instead!", kgamma[5], kgamma[6]);
+		return -EINVAL;
+	}
+
+	for (i=1; i<10; i++) {
+		if (kgamma[i] > 255) {
+			pr_info("char values  can't be over 255, got %d instead!", kgamma[i]);
+			return -EINVAL;
+		}
+	}
+
+	if (calc_checksum(kgamma) == (unsigned char) kgamma[0]) {
+		kgamma[0] = 0xd0 + offset;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_p [%d] => %d \n", i, kgamma[i]);
+			local_power_on_set_1[5+offset].payload[i] = kgamma[i];
+		}
+
+		kgamma[0] = 0xd1 + offset;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_n [%d] => %d \n", i, kgamma[i]);
+			local_power_on_set_1[6+offset].payload[i] = kgamma[i];
+		}
+		return count;
+	}
+	return -EINVAL;
+}
+
+static ssize_t do_kgamma_show(struct device *dev, struct device_attribute *attr,
+				char *buf, unsigned int offset)
+{
+	int kgamma[10];
+	int i;
+
+	for (i=1; i<10; i++)
+		kgamma[i] = local_power_on_set_1[5+offset].payload[i];
+
+	kgamma[0] = (int) calc_checksum(kgamma);
+
+	return sprintf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		kgamma[0], kgamma[1], kgamma[2], kgamma[3],
+		kgamma[4], kgamma[5], kgamma[6], kgamma[7],
+		kgamma[8], kgamma[9]);
+}
+
+static ssize_t kgamma_r_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	return do_kgamma_store(dev,attr,buf,count,0);
+}
+
+static ssize_t kgamma_r_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	return do_kgamma_show(dev,attr,buf,0);
+}
+
+static ssize_t kgamma_g_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	return do_kgamma_store(dev,attr,buf,count,2);
+}
+
+static ssize_t kgamma_g_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	return do_kgamma_show(dev,attr,buf,2);
+}
+
+static ssize_t kgamma_b_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	return do_kgamma_store(dev,attr,buf,count,4);
+}
+
+static ssize_t kgamma_b_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	return do_kgamma_show(dev,attr,buf,4);
+}
+
+static ssize_t kgamma_apply_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	int ret = 0;
+
+	/*
+	 * Only attempt to apply if the LCD is active.
+	 * If it isn't, the device will panic-reboot
+	 */
+	if(lcd_isactive) {
+		MIPI_OUTP(MIPI_DSI_BASE + 0x38, 0x10000000);
+		ret = mipi_dsi_cmds_tx(&lgit_tx_buf,
+				local_power_on_set_1,
+				mipi_lgit_pdata->power_on_set_size_1);
+		MIPI_OUTP(MIPI_DSI_BASE + 0x38, 0x14000000);
+		if (ret < 0) {
+			pr_err("%s: failed to transmit power_on_set_1 cmds\n", __func__);
+			return ret;
+		}
+	}
+	else {
+		pr_err("%s: Tried to apply gamma settings when LCD was off\n",__func__);
+		//Is ENODEV correct here?  Perhaps it should be something else?
+		return -ENODEV;
+	}
+	return count;
+}
+
+static ssize_t kgamma_apply_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	return 0;
+}
+
+static DEVICE_ATTR(kgamma_r, 0644, kgamma_r_show, kgamma_r_store);
+static DEVICE_ATTR(kgamma_g, 0644, kgamma_g_show, kgamma_g_store);
+static DEVICE_ATTR(kgamma_b, 0644, kgamma_b_show, kgamma_b_store);
+static DEVICE_ATTR(kgamma_apply, 0644, kgamma_apply_show, kgamma_apply_store);
+
+/******************* End sysfs interface *******************/
+
 static int mipi_lgit_lcd_probe(struct platform_device *pdev)
 {
+	int rc;
+
 	if (pdev->id == 0) {
 		mipi_lgit_pdata = pdev->dev.platform_data;
 		return 0;
 	}
 
+	// Make a copy of platform data
+	memcpy((void*)local_power_on_set_1, (void*)mipi_lgit_pdata->power_on_set_1,
+		sizeof(local_power_on_set_1));
+
 	pr_info("%s start\n", __func__);
 
 	skip_init = true;
@@ -228,6 +393,22 @@ static int mipi_lgit_lcd_probe(struct platform_device *pdev)
 
 	register_syscore_ops(&panel_syscore_ops);
 
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_r);
+	if(rc !=0)
+		return -1;
+
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_g);
+	if(rc !=0)
+		return -1;
+
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_b);
+	if(rc !=0)
+		return -1;
+
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_apply);
+	if(rc !=0)
+		return -1;
+
 	return 0;
 }
 
-- 
1.8.4

