--- drivers/media/video/msm/msm_vfe32.c	2013-06-24 02:50:45.000000000 -0600
+++ drivers/media/video/msm/msm_vfe32.c	2013-08-01 23:38:00.000000000 -0600
@@ -59,6 +59,8 @@
 static uint32_t vfe_clk_rate;
 static void vfe32_send_isp_msg(struct vfe32_ctrl_type *vctrl,
         uint32_t isp_msg_id);
+static atomic_t recovery_active;
+static uint32_t recover_irq_mask0, recover_irq_mask1;
 
 struct vfe32_isr_queue_cmd {
 	struct list_head list;
@@ -579,6 +581,7 @@
 	vfe32_ctrl->frame_skip_cnt = 31;
 	vfe32_ctrl->frame_skip_pattern = 0xffffffff;
 	vfe32_ctrl->snapshot_frame_cnt = 0;
+	atomic_set(&recovery_active, 0);
 }
 
 static void vfe32_program_dmi_cfg(enum VFE32_DMI_RAM_SEL bankSel)
@@ -2816,8 +2819,14 @@
 				vfe32_AXI_WM_CFG[vfe32_ctrl->outpath.out0.ch0]);
 				msm_io_w(0, vfe32_ctrl->vfebase +
 				vfe32_AXI_WM_CFG[vfe32_ctrl->outpath.out0.ch1]);
+				vfe32_ctrl->liveshot_state = VFE_STATE_HW_STOP_REQUESTED;
+				msm_io_w_mb(1, vfe32_ctrl->vfebase +
+					VFE_REG_UPDATE_CMD);
 			}
 			break;
+		case VFE_STATE_HW_STOP_REQUESTED:
+			vfe32_ctrl->liveshot_state = VFE_STATE_HW_STOPPED;
+			break;
 		case VFE_STATE_STOP_REQUESTED:
 			if (vfe32_ctrl->outpath.output_mode &
 					VFE32_OUTPUT_MODE_PRIMARY) {
@@ -2945,6 +2954,32 @@
 {
 	unsigned long flags;
 
+	if (atomic_read(&recovery_active) == 1) {
+		pr_info("Recovery restart stream\n");
+		msm_io_w(0x3FFF,
+			vfe32_ctrl->vfebase + VFE_BUS_CMD);
+		msm_io_w(recover_irq_mask0, vfe32_ctrl->vfebase + VFE_IRQ_MASK_0);
+		msm_io_w(recover_irq_mask1, vfe32_ctrl->vfebase + VFE_IRQ_MASK_1);
+
+		if (vfe32_ctrl->liveshot_state == VFE_STATE_START_REQUESTED ||
+			vfe32_ctrl->liveshot_state == VFE_STATE_STARTED ||
+			vfe32_ctrl->liveshot_state == VFE_STATE_HW_STOP_REQUESTED) {
+			pr_info("Liveshot recovery\n");
+			vfe32_ctrl->outpath.out0.capture_cnt = 1;
+			vfe32_ctrl->vfe_capture_count =
+				vfe32_ctrl->outpath.out0.capture_cnt;
+			vfe32_ctrl->liveshot_state = VFE_STATE_START_REQUESTED;
+		}
+		msm_io_w_mb(0x3,
+			vfe32_ctrl->vfebase + VFE_REG_UPDATE_CMD);
+		pr_info("camif cfg: 0x%x\n", msm_io_r(vfe32_ctrl->vfebase + 0x1EC));
+		msm_io_w_mb(0x4, vfe32_ctrl->vfebase + 0x1E0);
+		msm_io_w_mb(0x1, vfe32_ctrl->vfebase + 0x1E0);
+		atomic_set(&recovery_active, 0);
+		pr_info("Recovery restart done\n");
+		return;
+	}
+
 	atomic_set(&vfe32_ctrl->vstate, 0);
 
 	spin_lock_irqsave(&vfe32_ctrl->stop_flag_lock, flags);
@@ -3010,7 +3045,11 @@
 		pr_err("vfe32_irq: camif errors\n");
 		reg_value = msm_io_r(vfe32_ctrl->vfebase + VFE_CAMIF_STATUS);
 		pr_err("camifStatus  = 0x%x\n", reg_value);
-		vfe32_send_isp_msg(vfe32_ctrl, MSG_ID_CAMIF_ERROR);
+		if (reg_value & ~0x80000000) {
+			v4l2_subdev_notify(&vfe32_ctrl->subdev,
+				NOTIFY_VFE_CAMIF_ERROR, (void *)NULL);
+			vfe32_send_isp_msg(vfe32_ctrl, MSG_ID_CAMIF_ERROR);
+		}
 	}
 
 	if (errStatus & VFE32_IMASK_BHIST_OVWR)
@@ -3117,6 +3156,8 @@
 		vfe32_ctrl->operation_mode == VFE_OUTPUTS_JPEG_AND_THUMB ||
 		vfe32_ctrl->operation_mode == VFE_OUTPUTS_RAW ||
 		vfe32_ctrl->liveshot_state == VFE_STATE_STARTED ||
+		vfe32_ctrl->liveshot_state == VFE_STATE_HW_STOP_REQUESTED ||
+		vfe32_ctrl->liveshot_state == VFE_STATE_HW_STOPPED ||
 		vfe32_ctrl->liveshot_state == VFE_STATE_STOP_REQUESTED ||
 		vfe32_ctrl->liveshot_state == VFE_STATE_STOPPED) &&
 		(vfe32_ctrl->vfe_capture_count <= 1)) || free_buf;
@@ -3699,6 +3740,8 @@
 static void axi32_do_tasklet(unsigned long data)
 {
 	unsigned long flags;
+	uint8_t  axi_busy_flag = true;
+	uint32_t halt_timeout = 100;
 	struct axi_ctrl_t *axi_ctrl = (struct axi_ctrl_t *)data;
 	struct vfe32_isr_queue_cmd *qcmd = NULL;
 
@@ -3721,11 +3764,13 @@
 		spin_unlock_irqrestore(&axi_ctrl->tasklet_lock,
 			flags);
 
-		if (qcmd->vfeInterruptStatus0 &
-				VFE_IRQ_STATUS0_CAMIF_SOF_MASK)
-			v4l2_subdev_notify(&axi_ctrl->subdev,
-				NOTIFY_VFE_IRQ,
-				(void *)VFE_IRQ_STATUS0_CAMIF_SOF_MASK);
+		if (!atomic_read(&recovery_active)) {
+			if (qcmd->vfeInterruptStatus0 &
+					VFE_IRQ_STATUS0_CAMIF_SOF_MASK)
+				v4l2_subdev_notify(&axi_ctrl->subdev,
+					NOTIFY_VFE_IRQ,
+					(void *)VFE_IRQ_STATUS0_CAMIF_SOF_MASK);
+		}
 
 		
 		if (qcmd->vfeInterruptStatus0 &
@@ -3742,12 +3787,25 @@
 
 		if (atomic_read(&vfe32_ctrl->vstate)) {
 			if (qcmd->vfeInterruptStatus1 &
-					VFE32_IMASK_ERROR_ONLY_1) {
+					VFE32_IMASK_ERROR_ONLY_1 && atomic_read(&recovery_active) != 1) {
 				pr_err("irq	errorIrq\n");
 				vfe32_process_error_irq(
 					qcmd->vfeInterruptStatus1 &
 					VFE32_IMASK_ERROR_ONLY_1);
 			}
+
+			if ((qcmd->vfeInterruptStatus1 & 0x3FFF00) && atomic_read(&recovery_active) == 2) {
+				while (axi_busy_flag && halt_timeout--) {
+					if (msm_io_r(axi_ctrl->vfebase + VFE_AXI_STATUS) & 0x1)
+						axi_busy_flag = false;
+				}
+				msm_io_w_mb(AXI_HALT_CLEAR, axi_ctrl->vfebase + VFE_AXI_CMD);
+				pr_info("Halt done\n");
+				msm_io_w(0x000003EF, axi_ctrl->vfebase + 0x4);
+				atomic_set(&recovery_active, 1);
+			}
+
+			if(!atomic_read(&recovery_active))
 			v4l2_subdev_notify(&axi_ctrl->subdev,
 				NOTIFY_AXI_IRQ,
 				(void *)qcmd->vfeInterruptStatus0);
@@ -3854,7 +3912,7 @@
 	}
 
 	spin_lock_irqsave(&vfe32_ctrl->stop_flag_lock, flags);
-	if (vfe32_ctrl->stop_ack_pending) {
+	if (vfe32_ctrl->stop_ack_pending || atomic_read(&recovery_active)) {
 		irq.vfeIrqStatus0 &= VFE_IMASK_WHILE_STOPPING_0;
 		irq.vfeIrqStatus1 &= VFE_IMASK_WHILE_STOPPING_1;
 	}
@@ -3866,6 +3924,19 @@
 	qcmd->vfeInterruptStatus0 = irq.vfeIrqStatus0;
 	qcmd->vfeInterruptStatus1 = irq.vfeIrqStatus1;
 
+	if ((qcmd->vfeInterruptStatus1 & 0x3FFF00) && !atomic_read(&recovery_active)) {
+		pr_info("Start recovery\n");
+		recover_irq_mask0 = msm_io_r(axi_ctrl->vfebase + VFE_IRQ_MASK_0);
+		recover_irq_mask1 = msm_io_r(axi_ctrl->vfebase + VFE_IRQ_MASK_1);
+		msm_io_w(0x0, axi_ctrl->vfebase + VFE_IRQ_MASK_0);
+		msm_io_w((0x1 << 23), axi_ctrl->vfebase + VFE_IRQ_MASK_1);
+		msm_io_w(VFE_CLEAR_ALL_IRQS, axi_ctrl->vfebase + VFE_IRQ_CLEAR_0);
+		msm_io_w(VFE_CLEAR_ALL_IRQS, axi_ctrl->vfebase + VFE_IRQ_CLEAR_1);
+		msm_io_w(0x2, axi_ctrl->vfebase + 0x1E0);
+		msm_io_w(AXI_HALT, axi_ctrl->vfebase + VFE_AXI_CMD);
+		wmb();
+		atomic_set(&recovery_active, 2);
+	}
 	spin_lock_irqsave(&axi_ctrl->tasklet_lock, flags);
 	list_add_tail(&qcmd->list, &axi_ctrl->tasklet_q);
 
